import java_cup.runtime.*;
import java.io.*;

parser code {:
  public static void main(String args[]) throws Exception {
    try{
      new parser(new Yylex(System.in)).parse();  // Inicializamos el scanner (Yylex) para que
    }
    catch ( Exception e) {
      System.out.println( e );
      System.out.println(" Análisis INCORRECTO !!");
      System.exit(1);
    }
    System.out.println("Análisis Correcto ");
   }
:}

terminal CORCHETE_ABIERTO, CORCHETE_CERRADO,PARENTESIS_ABIERTO, PARENTESIS_CERRADO, COMA, PUNTO_Y_COMA, ASIGNADOR, UNION, PALABRA_VACIA, IGUAL;
terminal GRAMATICA, TERMINAL, NO_TERMINAL, AXIOMA, PRODUCCION, AUTOMATA;
terminal  ESTADOS, ALFABETO, INICIAL, FINAL, TRANSICION;
terminal TEXTO;
terminal CARACTER;

terminal EXPRESION_REGULAR, P_CUADRADO_ABIERTO, P_CUADRADO_CERRADO, GUION, CLAUSURA, CLAUSURA_POSITIVA, INTERROGACION, INTERSECCION, PARENTESIS_ABIERTO, PARENTESIS_CERRADO;

non terminal lista_simbolos_espacio, lista_simbolos_coma, union_lista_simbolos;
non terminal estado_actual_transita, estado_transitado;
non terminal regla_produccion, lista_reglas_produccion;
non terminal regla_transicion,regla_transicion_p, lista_reglas_transicion;
non terminal term_p, no_term_p, axioma_p, produccion_p;
non terminal estados_p, alfabeto_p, inicial_p, final_p, transicion_p;
non terminal term, no_term, axioma, produccion;
non terminal estados, alfabeto, inicial, final, transicion;
non terminal gramat;
non terminal automaton;
non terminal general;

non terminal lista_reglas_expresion, lista_reglas_expresion_intermedio, reglas_expresiones, regla_concatenacion, regla_interseccion, regla_clase, regla_clausura, regla_clausura_positiva, regla_opcionalidad, regla_expresion;

non terminal regexp;

precedence left COMA;
precedence left UNION;
precedence left IGUAL;
precedence left ASIGNADOR;

<<<<<<< HEAD
general ::= automaton general | gramat general | automaton | gramat;


=======
precedence left INTERSECCION;
precedence left GUION;
precedence left CLAUSURA;
precedence left CLAUSURA_CERRADA;
precedence left INTERROGACION;

general ::= general gramat | general automaton | general regexp | gramat | automaton | regexp; 
>>>>>>> 96b201a1f0e041ada3978dce489cb66a8850926f

gramat ::= GRAMATICA TEXTO CORCHETE_ABIERTO
   term_p
   no_term_p
   axioma_p
   produccion_p
   CORCHETE_CERRADO;
   
automaton ::= AUTOMATA TEXTO CORCHETE_ABIERTO
   estados_p
   alfabeto_p
   inicial_p
   final_p
   transicion_p
   CORCHETE_CERRADO;
   


regexp ::= EXPRESION_REGULAR TEXTO CORCHETE_ABIERTO lista_reglas_expresion CORCHETE_CERRADO;



term_p ::= term PUNTO_Y_COMA;
no_term_p ::= no_term PUNTO_Y_COMA;
axioma_p ::= axioma PUNTO_Y_COMA;
produccion_p ::= produccion;

estados_p ::= estados PUNTO_Y_COMA;
alfabeto_p ::= alfabeto PUNTO_Y_COMA;
inicial_p ::= inicial PUNTO_Y_COMA;
final_p ::= final PUNTO_Y_COMA;
transicion_p ::= transicion;

term ::= TERMINAL lista_simbolos_coma;
no_term ::= NO_TERMINAL lista_simbolos_coma;
axioma ::= AXIOMA TEXTO;
produccion ::= PRODUCCION CORCHETE_ABIERTO lista_reglas_produccion CORCHETE_CERRADO;

estados ::= ESTADOS lista_simbolos_coma;
alfabeto ::= ALFABETO lista_simbolos_coma;
inicial ::= INICIAL TEXTO;
final ::= FINAL lista_simbolos_coma;
transicion ::= TRANSICION CORCHETE_ABIERTO lista_reglas_transicion CORCHETE_CERRADO;

regla_produccion::= TEXTO ASIGNADOR union_lista_simbolos PUNTO_Y_COMA;
lista_reglas_produccion::= lista_reglas_produccion regla_produccion | regla_produccion;

<<<<<<< HEAD
estado_actual_transita ::= TEXTO COMA | TEXTO COMA TEXTO;
estado_transitado ::= TEXTO | PARENTESIS_ABIERTO lista_simbolos_coma PARENTESIS_CERRADO;
regla_transicion::= estado_actual_transita IGUAL estado_transitado;
regla_transicion_p ::= regla_transicion PUNTO_Y_COMA;
lista_reglas_transicion::= lista_reglas_transicion regla_transicion_p | regla_transicion_p;
=======
regla_transicion::= TEXTO COMA TEXTO IGUAL TEXTO;
lista_reglas_transicion::= lista_reglas_transicion regla_transicion | regla_transicion; 
>>>>>>> 96b201a1f0e041ada3978dce489cb66a8850926f

lista_simbolos_espacio ::= lista_simbolos_espacio TEXTO | TEXTO;
lista_simbolos_coma ::= lista_simbolos_coma COMA TEXTO | TEXTO;
union_lista_simbolos ::= union_lista_simbolos UNION lista_simbolos_espacio |
                         union_lista_simbolos UNION PALABRA_VACIA |
                         lista_simbolos_espacio;


lista_reglas_expresion ::= lista_reglas_expresion_intermedio | PARENTESIS_ABIERTO lista_reglas_expresion PARENTESIS_CERRADO;

lista_reglas_expresion_intermedio ::= lista_reglas_expresion regla_expresion | regla_expresion;

reglas_expresiones ::= regla_concatenacion | regla_expresion | regla_interseccion | regla_clase | regla_clausura | regla_clausura_positiva | regla_opcionalidad; 

regla_concatenacion ::= lista_reglas_expresion lista_reglas_expresion;

regla_interseccion ::= lista_reglas_expresion INTERSECCION lista_reglas_expresion;        

regla_clase ::= P_CUADRADO_ABIERTO CARACTER GUION CARACTER P_CUADRADO_CERRADO;

regla_clausura ::= lista_reglas_expresion CLAUSURA;

regla_clausura_positiva ::= lista_reglas_expresion CLAUSURA_POSITIVA;

regla_opcionalidad ::= lista_reglas_expresion INTERROGACION;

regla_expresion::= CARACTER | COMILLA TEXTO COMILLA;
