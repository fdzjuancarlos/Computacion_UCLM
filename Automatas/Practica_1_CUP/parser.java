
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 11 09:54:49 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 11 09:54:49 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\040\004\000\002\002\004\000\002\040" +
    "\004\000\002\040\003\000\002\040\003\000\002\036\012" +
    "\000\002\037\013\000\002\014\004\000\002\015\004\000" +
    "\002\016\004\000\002\017\003\000\002\020\004\000\002" +
    "\021\004\000\002\022\004\000\002\023\004\000\002\024" +
    "\003\000\002\025\004\000\002\026\004\000\002\027\004" +
    "\000\002\030\006\000\002\031\004\000\002\032\004\000" +
    "\002\033\004\000\002\034\004\000\002\035\006\000\002" +
    "\007\006\000\002\010\004\000\002\010\003\000\002\005" +
    "\004\000\002\005\005\000\002\006\003\000\002\006\005" +
    "\000\002\011\005\000\002\012\004\000\002\013\004\000" +
    "\002\013\003\000\002\002\004\000\002\002\003\000\002" +
    "\003\005\000\002\003\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\006\016\006\023\007\001\002\000\004\002" +
    "\135\001\002\000\010\002\ufffe\016\006\023\007\001\002" +
    "\000\004\031\070\001\002\000\004\031\012\001\002\000" +
    "\010\002\ufffd\016\006\023\007\001\002\000\004\002\uffff" +
    "\001\002\000\004\004\013\001\002\000\004\024\014\001" +
    "\002\000\004\031\024\001\002\000\004\025\021\001\002" +
    "\000\004\011\017\001\002\000\004\025\ufff6\001\002\000" +
    "\004\026\031\001\002\000\004\031\024\001\002\000\004" +
    "\011\023\001\002\000\004\026\ufff5\001\002\000\010\007" +
    "\uffda\010\uffda\011\uffda\001\002\000\006\010\026\011\uffec" +
    "\001\002\000\004\031\027\001\002\000\010\007\uffdb\010" +
    "\uffdb\011\uffdb\001\002\000\004\027\037\001\002\000\004" +
    "\031\034\001\002\000\004\011\033\001\002\000\004\027" +
    "\ufff4\001\002\000\004\011\uffeb\001\002\000\004\030\044" +
    "\001\002\000\004\011\041\001\002\000\004\031\024\001" +
    "\002\000\006\010\026\011\uffea\001\002\000\004\030\ufff3" +
    "\001\002\000\004\005\ufff2\001\002\000\004\005\066\001" +
    "\002\000\004\004\045\001\002\000\004\031\046\001\002" +
    "\000\004\010\064\001\002\000\004\015\056\001\002\000" +
    "\006\005\uffde\031\uffde\001\002\000\006\005\054\031\046" +
    "\001\002\000\004\011\053\001\002\000\006\005\uffe0\031" +
    "\uffe0\001\002\000\004\005\uffe9\001\002\000\006\005\uffdf" +
    "\031\uffdf\001\002\000\006\006\061\031\057\001\002\000" +
    "\004\011\uffe3\001\002\000\004\011\uffe1\001\002\000\004" +
    "\031\024\001\002\000\006\007\063\010\026\001\002\000" +
    "\004\011\uffe2\001\002\000\006\015\uffe5\031\065\001\002" +
    "\000\004\015\uffe4\001\002\000\010\002\ufffb\016\ufffb\023" +
    "\ufffb\001\002\000\006\010\026\011\uffed\001\002\000\004" +
    "\004\071\001\002\000\004\017\073\001\002\000\004\020" +
    "\100\001\002\000\004\031\024\001\002\000\004\011\075" +
    "\001\002\000\004\020\ufffa\001\002\000\006\010\026\011" +
    "\ufff1\001\002\000\004\011\133\001\002\000\004\031\024" +
    "\001\002\000\004\021\102\001\002\000\004\031\131\001" +
    "\002\000\004\022\106\001\002\000\004\011\105\001\002" +
    "\000\004\022\ufff8\001\002\000\004\004\112\001\002\000" +
    "\004\005\111\001\002\000\004\005\ufff7\001\002\000\010" +
    "\002\ufffc\016\ufffc\023\ufffc\001\002\000\004\031\113\001" +
    "\002\000\004\012\120\001\002\000\006\005\116\031\113" +
    "\001\002\000\006\005\uffe6\031\uffe6\001\002\000\004\005" +
    "\uffee\001\002\000\006\005\uffe7\031\uffe7\001\002\000\004" +
    "\031\121\001\002\000\010\011\uffdc\013\uffdc\031\uffdc\001" +
    "\002\000\006\011\126\013\125\001\002\000\010\011\uffd7" +
    "\013\uffd7\031\124\001\002\000\010\011\uffdd\013\uffdd\031" +
    "\uffdd\001\002\000\006\014\127\031\121\001\002\000\006" +
    "\005\uffe8\031\uffe8\001\002\000\006\011\uffd8\013\uffd8\001" +
    "\002\000\010\011\uffd9\013\uffd9\031\124\001\002\000\004" +
    "\011\uffef\001\002\000\006\010\026\011\ufff0\001\002\000" +
    "\004\021\ufff9\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\010\036\007\037\004\040\003\001\001\000" +
    "\002\001\001\000\010\036\007\037\004\040\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\007\037" +
    "\004\040\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\014\031\015\001\001\000\004\003\066\001" +
    "\001\000\006\021\017\032\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\027\033\031\001\001\000" +
    "\004\003\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\034\034\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\042\035\041\001\001\000\002\001\001" +
    "\000\004\003\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\046\011\051\012\047\013\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\046\011\051\012\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\071\025\073" +
    "\001\001\000\006\015\100\026\076\001\001\000\004\003" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\131\001\001\000" +
    "\006\016\102\027\103\001\001\000\002\001\001\000\006" +
    "\017\106\030\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\114\010\113\001\001\000" +
    "\002\001\001\000\004\007\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\122\004" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static void main(String args[]) throws Exception {
    try{
      new parser(new Yylex(System.in)).parse();  // Inicializamos el scanner (Yylex) para que
    }
    catch ( Exception e) {
      System.out.println( e );
      System.out.println(" An�lisis INCORRECTO !!");
      System.exit(1);
    }
    System.out.println("An�lisis Correcto ");
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // union_lista_simbolos ::= lista_simbolos_espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_lista_simbolos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // union_lista_simbolos ::= union_lista_simbolos UNION PALABRA_VACIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_lista_simbolos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // union_lista_simbolos ::= union_lista_simbolos UNION lista_simbolos_espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_lista_simbolos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_simbolos_coma ::= TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_coma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_simbolos_coma ::= lista_simbolos_coma COMA TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_coma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_simbolos_espacio ::= TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_espacio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_simbolos_espacio ::= lista_simbolos_espacio TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_espacio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_reglas_transicion ::= regla_transicion_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_transicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_reglas_transicion ::= lista_reglas_transicion regla_transicion_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_transicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // regla_transicion_p ::= regla_transicion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_transicion_p",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // regla_transicion ::= estado_actual_transita IGUAL estado_transitado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_transicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // estado_transitado ::= PARENTESIS_ABIERTO lista_simbolos_coma PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_transitado",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estado_transitado ::= TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_transitado",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estado_actual_transita ::= TEXTO COMA TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_actual_transita",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estado_actual_transita ::= TEXTO COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_actual_transita",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_reglas_produccion ::= regla_produccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_produccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_reglas_produccion ::= lista_reglas_produccion regla_produccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_produccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // regla_produccion ::= TEXTO ASIGNADOR union_lista_simbolos PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_produccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // transicion ::= TRANSICION CORCHETE_ABIERTO lista_reglas_transicion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // final ::= FINAL lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicial ::= INICIAL TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // alfabeto ::= ALFABETO lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alfabeto",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estados ::= ESTADOS lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // produccion ::= PRODUCCION CORCHETE_ABIERTO lista_reglas_produccion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("produccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // axioma ::= AXIOMA TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axioma",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // no_term ::= NO_TERMINAL lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= TERMINAL lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // transicion_p ::= transicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion_p",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // final_p ::= final PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_p",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicial_p ::= inicial PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial_p",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // alfabeto_p ::= alfabeto PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alfabeto_p",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estados_p ::= estados PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados_p",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // produccion_p ::= produccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("produccion_p",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // axioma_p ::= axioma PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axioma_p",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // no_term_p ::= no_term PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_term_p",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term_p ::= term PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_p",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // automaton ::= AUTOMATA TEXTO CORCHETE_ABIERTO estados_p alfabeto_p inicial_p final_p transicion_p CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("automaton",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // gramat ::= GRAMATICA TEXTO CORCHETE_ABIERTO term_p no_term_p axioma_p produccion_p CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gramat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // general ::= gramat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // general ::= automaton 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // general ::= gramat general 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= general EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // general ::= automaton general 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

