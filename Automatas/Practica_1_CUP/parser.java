
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 11 16:48:58 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 11 16:48:58 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\040\004\000\002\002\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\004\000" +
    "\002\040\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\042\003\000\002\042\003\000\002\036" +
    "\012\000\002\037\013\000\002\063\007\000\002\054\004" +
    "\000\002\060\010\000\002\055\004\000\002\061\010\000" +
    "\002\056\004\000\002\062\010\000\002\014\004\000\002" +
    "\015\004\000\002\016\004\000\002\017\003\000\002\020" +
    "\004\000\002\021\004\000\002\022\004\000\002\023\004" +
    "\000\002\024\003\000\002\025\004\000\002\026\004\000" +
    "\002\027\004\000\002\030\006\000\002\031\004\000\002" +
    "\032\004\000\002\033\004\000\002\034\004\000\002\035" +
    "\006\000\002\007\006\000\002\010\004\000\002\010\003" +
    "\000\002\005\004\000\002\005\005\000\002\006\003\000" +
    "\002\006\005\000\002\011\005\000\002\012\004\000\002" +
    "\013\004\000\002\013\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\041\003\000" +
    "\002\041\003\000\002\043\003\000\002\043\003\000\002" +
    "\044\003\000\002\044\005\000\002\044\004\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\046\005\000" +
    "\002\047\007\000\002\050\004\000\002\051\004\000\002" +
    "\052\004\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\032\006\010\014\021\016\033\023\004\031" +
    "\037\033\024\034\027\035\026\036\020\041\025\042\013" +
    "\050\034\001\002\000\006\031\037\034\027\001\002\000" +
    "\020\002\ufffc\016\ufffc\023\ufffc\031\ufffc\034\ufffc\036\ufffc" +
    "\041\ufffc\001\002\000\050\002\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\013\uffbc\014\uffbc\016\uffbc\023\uffbc\031\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\041\uffbc\042\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\001\002\000\044\002\ufffa\006\010" +
    "\013\140\014\021\016\ufffa\023\ufffa\031\037\033\024\034" +
    "\027\035\026\036\ufffa\041\ufffa\042\013\045\141\046\142" +
    "\047\136\050\034\001\002\000\022\006\010\014\021\031" +
    "\037\033\024\034\027\035\026\042\013\050\034\001\002" +
    "\000\050\002\uffb3\005\uffb3\006\uffb3\007\uffb3\013\uffb3\014" +
    "\uffb3\016\uffb3\023\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\041\uffb3\042\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\001\002\000\020\002\ufff5\016\ufff5\023\ufff5\031\ufff5" +
    "\034\ufff5\036\ufff5\041\ufff5\001\002\000\006\032\160\034" +
    "\161\001\002\000\020\002\ufffd\016\ufffd\023\ufffd\031\ufffd" +
    "\034\ufffd\036\ufffd\041\ufffd\001\002\000\004\011\157\001" +
    "\002\000\050\002\uffbe\005\uffbe\006\uffbe\007\uffbe\013\uffbe" +
    "\014\uffbe\016\uffbe\023\uffbe\031\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\041\uffbe\042\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\001\002\000\020\002\ufff7\016\ufff7\023\ufff7\031" +
    "\ufff7\034\ufff7\036\ufff7\041\ufff7\001\002\000\004\006\152" +
    "\001\002\000\050\002\uffb2\005\uffb2\006\uffb2\007\uffb2\013" +
    "\uffb2\014\uffb2\016\uffb2\023\uffb2\031\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\041\uffb2\042\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\001\002\000\050\002\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\013\uffb9\014\uffb9\016\uffb9\023\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\041\uffb9\042\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\001\002\000\020\002\146\016" +
    "\033\023\004\031\037\034\027\036\020\041\025\001\002" +
    "\000\050\002\uffc4\005\uffc4\006\uffc4\007\uffc4\013\uffc4\014" +
    "\uffc4\016\uffc4\023\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\041\uffc4\042\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\001\002\000\006\031\037\034\027\001\002\000\050" +
    "\002\uffb1\005\uffb1\006\uffb1\007\uffb1\013\uffb1\014\uffb1\016" +
    "\uffb1\023\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\041\uffb1\042\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\001" +
    "\002\000\062\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\023\ufff3\031\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\041\ufff3\042\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\001" +
    "\002\000\050\002\uffbd\005\uffbd\006\uffbd\007\uffbd\013\uffbd" +
    "\014\uffbd\016\uffbd\023\uffbd\031\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\001\002\000\050\002\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\013\uffc1\014\uffc1\016\uffc1\023\uffc1\031\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\001\002\000\020\002\ufff8\016\ufff8" +
    "\023\ufff8\031\ufff8\034\ufff8\036\ufff8\041\ufff8\001\002\000" +
    "\006\031\037\034\027\001\002\000\010\031\037\033\024" +
    "\034\027\001\002\000\004\011\057\001\002\000\050\002" +
    "\uffba\005\uffba\006\uffba\007\uffba\013\uffba\014\uffba\016\uffba" +
    "\023\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba\041" +
    "\uffba\042\uffba\045\uffba\046\uffba\047\uffba\050\uffba\001\002" +
    "\000\062\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\023\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\041" +
    "\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\001\002" +
    "\000\004\011\056\001\002\000\050\002\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\013\uffbb\014\uffbb\016\uffbb\023\uffbb\031\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\001\002\000\020\002\ufff6" +
    "\016\ufff6\023\ufff6\031\ufff6\034\ufff6\036\ufff6\041\ufff6\001" +
    "\002\000\046\002\uffc5\006\uffc5\013\uffc5\014\uffc5\015\045" +
    "\016\uffc5\023\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\041\uffc5\042\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\001\002\000\020\002\ufffb\016\ufffb\023\ufffb\031\ufffb\034" +
    "\ufffb\036\ufffb\041\ufffb\001\002\000\006\037\046\040\047" +
    "\001\002\000\004\006\053\001\002\000\004\006\050\001" +
    "\002\000\006\031\037\034\027\001\002\000\004\007\052" +
    "\001\002\000\004\011\uffea\001\002\000\006\031\037\034" +
    "\027\001\002\000\004\007\055\001\002\000\004\011\uffec" +
    "\001\002\000\020\002\uffef\016\uffef\023\uffef\031\uffef\034" +
    "\uffef\036\uffef\041\uffef\001\002\000\020\002\uffed\016\uffed" +
    "\023\uffed\031\uffed\034\uffed\036\uffed\041\uffed\001\002\000" +
    "\004\050\062\001\002\000\050\002\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\013\uffc5\014\uffc5\016\uffc5\023\uffc5\031\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\001\002\000\050\002\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\013\uffb0\014\uffb0\016\uffb0\023\uffb0" +
    "\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\041\uffb0\042" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\001\002\000\004" +
    "\004\064\001\002\000\004\017\065\001\002\000\006\031" +
    "\037\034\027\001\002\000\004\020\072\001\002\000\004" +
    "\011\070\001\002\000\004\020\uffe9\001\002\000\004\011" +
    "\130\001\002\000\006\031\037\034\027\001\002\000\004" +
    "\021\074\001\002\000\006\031\037\034\027\001\002\000" +
    "\004\022\100\001\002\000\004\011\077\001\002\000\004" +
    "\022\uffe7\001\002\000\004\004\104\001\002\000\004\005" +
    "\103\001\002\000\004\005\uffe6\001\002\000\020\002\ufff2" +
    "\016\ufff2\023\ufff2\031\ufff2\034\ufff2\036\ufff2\041\ufff2\001" +
    "\002\000\006\031\037\034\027\001\002\000\004\012\112" +
    "\001\002\000\010\005\110\031\037\034\027\001\002\000" +
    "\010\005\uffd5\031\uffd5\034\uffd5\001\002\000\004\005\uffdd" +
    "\001\002\000\010\005\uffd6\031\uffd6\034\uffd6\001\002\000" +
    "\006\031\037\034\027\001\002\000\006\011\120\013\117" +
    "\001\002\000\014\007\uffcb\011\uffcb\013\uffcb\031\uffcb\034" +
    "\uffcb\001\002\000\012\011\uffc6\013\uffc6\031\037\034\027" +
    "\001\002\000\014\007\uffcc\011\uffcc\013\uffcc\031\uffcc\034" +
    "\uffcc\001\002\000\010\014\121\031\037\034\027\001\002" +
    "\000\010\005\uffd7\031\uffd7\034\uffd7\001\002\000\006\011" +
    "\uffc7\013\uffc7\001\002\000\012\011\uffc8\013\uffc8\031\037" +
    "\034\027\001\002\000\004\011\uffde\001\002\000\010\007" +
    "\uffc9\010\uffc9\011\uffc9\001\002\000\006\010\126\011\uffdf" +
    "\001\002\000\006\031\037\034\027\001\002\000\010\007" +
    "\uffca\010\uffca\011\uffca\001\002\000\004\021\uffe8\001\002" +
    "\000\006\010\126\011\uffe0\001\002\000\004\004\133\001" +
    "\002\000\022\006\010\014\021\031\037\033\024\034\027" +
    "\035\026\042\013\050\034\001\002\000\034\005\137\006" +
    "\010\013\140\014\021\031\037\033\024\034\027\035\026" +
    "\042\013\045\141\046\142\047\136\050\034\001\002\000" +
    "\050\002\uffbf\005\uffbf\006\010\007\uffbf\013\140\014\021" +
    "\016\uffbf\023\uffbf\031\037\033\024\034\027\035\026\036" +
    "\uffbf\041\uffbf\042\013\045\141\046\142\047\136\050\034" +
    "\001\002\000\050\002\uffb4\005\uffb4\006\uffb4\007\uffb4\013" +
    "\uffb4\014\uffb4\016\uffb4\023\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\041\uffb4\042\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\001\002\000\020\002\ufff0\016\ufff0\023\ufff0" +
    "\031\ufff0\034\ufff0\036\ufff0\041\ufff0\001\002\000\022\006" +
    "\010\014\021\031\037\033\024\034\027\035\026\042\013" +
    "\050\034\001\002\000\050\002\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\013\uffb6\014\uffb6\016\uffb6\023\uffb6\031\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\001\002\000\050\002\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\013\uffb5\014\uffb5\016\uffb5\023\uffb5\031" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\041\uffb5\042\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\001\002\000\050\002" +
    "\uffb8\005\uffb8\006\010\007\uffb8\013\uffb8\014\021\016\uffb8" +
    "\023\uffb8\031\037\033\024\034\027\035\026\036\uffb8\041" +
    "\uffb8\042\013\045\141\046\142\047\136\050\034\001\002" +
    "\000\020\002\uffff\016\uffff\023\uffff\031\uffff\034\uffff\036" +
    "\uffff\041\uffff\001\002\000\020\002\001\016\001\023\001" +
    "\031\001\034\001\036\001\041\001\001\002\000\004\002" +
    "\000\001\002\000\020\002\ufff9\016\ufff9\023\ufff9\031\ufff9" +
    "\034\ufff9\036\ufff9\041\ufff9\001\002\000\004\015\045\001" +
    "\002\000\020\002\ufffe\016\ufffe\023\ufffe\031\ufffe\034\ufffe" +
    "\036\ufffe\041\ufffe\001\002\000\006\031\037\034\027\001" +
    "\002\000\004\010\154\001\002\000\006\031\037\034\027" +
    "\001\002\000\010\007\156\031\037\034\027\001\002\000" +
    "\004\011\uffee\001\002\000\020\002\uffeb\016\uffeb\023\uffeb" +
    "\031\uffeb\034\uffeb\036\uffeb\041\uffeb\001\002\000\006\043" +
    "\uffc2\044\uffc2\001\002\000\006\043\uffc3\044\uffc3\001\002" +
    "\000\004\044\163\001\002\000\006\032\160\034\161\001" +
    "\002\000\004\043\165\001\002\000\050\002\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\013\uffb7\014\uffb7\016\uffb7\023\uffb7\031" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\041\uffb7\042\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\001\002\000\034\006" +
    "\010\007\167\013\140\014\021\031\037\033\024\034\027" +
    "\035\026\042\013\045\141\046\142\047\136\050\034\001" +
    "\002\000\050\002\uffc0\005\uffc0\006\uffc0\007\uffc0\013\uffc0" +
    "\014\uffc0\016\uffc0\023\uffc0\031\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\001\002\000\004\004\171\001\002\000\004\024" +
    "\173\001\002\000\004\025\200\001\002\000\006\031\037" +
    "\034\027\001\002\000\004\011\175\001\002\000\004\025" +
    "\uffe5\001\002\000\006\010\126\011\uffdc\001\002\000\004" +
    "\026\205\001\002\000\006\031\037\034\027\001\002\000" +
    "\004\011\202\001\002\000\004\026\uffe4\001\002\000\006" +
    "\010\126\011\uffdb\001\002\000\004\027\213\001\002\000" +
    "\006\031\037\034\027\001\002\000\004\011\207\001\002" +
    "\000\004\027\uffe3\001\002\000\004\011\uffda\001\002\000" +
    "\004\030\220\001\002\000\004\011\215\001\002\000\006" +
    "\031\037\034\027\001\002\000\006\010\126\011\uffd9\001" +
    "\002\000\004\030\uffe2\001\002\000\004\005\uffe1\001\002" +
    "\000\004\005\242\001\002\000\004\004\221\001\002\000" +
    "\006\031\037\034\027\001\002\000\004\015\234\001\002" +
    "\000\004\010\232\001\002\000\010\005\uffcd\031\uffcd\034" +
    "\uffcd\001\002\000\010\005\230\031\037\034\027\001\002" +
    "\000\004\011\227\001\002\000\010\005\uffcf\031\uffcf\034" +
    "\uffcf\001\002\000\004\005\uffd8\001\002\000\010\005\uffce" +
    "\031\uffce\034\uffce\001\002\000\010\015\uffd4\031\037\034" +
    "\027\001\002\000\004\015\uffd3\001\002\000\010\006\237" +
    "\031\037\034\027\001\002\000\004\011\uffd2\001\002\000" +
    "\004\011\uffd0\001\002\000\006\031\037\034\027\001\002" +
    "\000\006\007\241\010\126\001\002\000\004\011\uffd1\001" +
    "\002\000\020\002\ufff1\016\ufff1\023\ufff1\031\ufff1\034\ufff1" +
    "\036\ufff1\041\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\054\036\013\037\004\040\022\041\010\042" +
    "\042\044\006\045\030\046\021\047\015\050\005\051\040" +
    "\052\035\053\027\054\016\055\041\056\011\057\031\060" +
    "\037\061\034\062\014\063\043\001\001\000\004\042\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\041" +
    "\010\042\060\044\134\045\030\046\021\047\015\050\005" +
    "\051\040\052\035\053\027\001\001\000\026\041\010\042" +
    "\060\044\165\045\030\046\021\047\015\050\005\051\040" +
    "\052\035\053\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\036\144" +
    "\037\143\042\147\054\016\055\041\056\011\057\146\060" +
    "\037\061\034\062\014\063\150\001\001\000\002\001\001" +
    "\000\004\042\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\062\001\001\000\006\041\057\042\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\065\025\066\001" +
    "\001\000\006\003\130\042\123\001\001\000\006\015\072" +
    "\026\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\124\042\123\001\001\000\006" +
    "\016\074\027\075\001\001\000\004\042\122\001\001\000" +
    "\006\017\100\030\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\106\010\105\042\104" +
    "\001\001\000\002\001\001\000\006\007\110\042\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\114\004\112\042\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\115\001\001\000\002" +
    "\001\001\000\006\002\121\042\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\041\010\042\060\044" +
    "\133\045\030\046\021\047\015\050\005\051\040\052\035" +
    "\053\027\001\001\000\026\041\010\042\060\044\134\045" +
    "\030\046\021\047\015\050\005\051\040\052\035\053\027" +
    "\001\001\000\026\041\010\042\060\044\134\045\030\046" +
    "\021\047\015\050\005\051\040\052\035\053\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\041\010\042" +
    "\060\044\142\045\030\046\021\047\015\050\005\051\040" +
    "\052\035\053\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\041\010\042\060\044\134\045\030\046\021" +
    "\047\015\050\005\051\040\052\035\053\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\152\001\001\000\002\001\001\000\006\002\154\042\113" +
    "\001\001\000\004\042\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\041\010\042\060\044\134\045\030" +
    "\046\021\047\015\050\005\051\040\052\035\053\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\171" +
    "\031\173\001\001\000\006\021\176\032\200\001\001\000" +
    "\006\003\175\042\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\203\033\205\001" +
    "\001\000\006\003\202\042\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\210\034" +
    "\211\001\001\000\004\042\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\216\035" +
    "\215\001\001\000\002\001\001\000\006\003\213\042\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\221" +
    "\011\225\012\223\013\224\042\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\221" +
    "\011\225\012\230\042\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\232\001\001\000\002\001\001\000\006\006\235\042" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\237\042\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static void main(String args[]) throws Exception {
    try{
      new parser(new Yylex(System.in)).parse();  // Inicializamos el scanner (Yylex) para que
    }
    catch ( Exception e) {
      System.out.println( e );
      System.out.println(" Analisis INCORRECTO !!");
      System.exit(1);
    }
    System.out.println("Analisis Correcto ");
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // regla_expresion ::= COMILLA texto COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_expresion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // regla_expresion ::= LENGUAJE_VACIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_expresion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // regla_expresion ::= PALABRA_VACIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_expresion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // regla_expresion ::= texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_expresion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // regla_opcionalidad ::= reg_expresion INTERROGACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_opcionalidad",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // regla_clausura_positiva ::= reg_expresion CLAUSURA_POSITIVA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_clausura_positiva",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // regla_clausura ::= reg_expresion CLAUSURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_clausura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // regla_clase ::= P_CUADRADO_ABIERTO caracter GUION caracter P_CUADRADO_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_clase",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // regla_interseccion ::= reg_expresion UNION reg_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_interseccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // reglas_expresiones ::= regla_interseccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // reglas_expresiones ::= regla_opcionalidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // reglas_expresiones ::= regla_clausura_positiva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // reglas_expresiones ::= regla_clausura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // reglas_expresiones ::= regla_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // reglas_expresiones ::= regla_clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // reg_expresion ::= reg_expresion reg_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // reg_expresion ::= PARENTESIS_ABIERTO reg_expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // reg_expresion ::= reglas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // caracter ::= CARACTER_NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caracter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // caracter ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caracter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // texto ::= CARACTERES_NUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // texto ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // union_lista_simbolos ::= lista_simbolos_espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_lista_simbolos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // union_lista_simbolos ::= union_lista_simbolos UNION PALABRA_VACIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_lista_simbolos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // union_lista_simbolos ::= union_lista_simbolos UNION lista_simbolos_espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_lista_simbolos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista_simbolos_coma ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_coma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_simbolos_coma ::= lista_simbolos_coma COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_coma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lista_simbolos_espacio ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_espacio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lista_simbolos_espacio ::= lista_simbolos_espacio identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_espacio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista_reglas_transicion ::= regla_transicion_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_transicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_reglas_transicion ::= lista_reglas_transicion regla_transicion_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_transicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // regla_transicion_p ::= regla_transicion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_transicion_p",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // regla_transicion ::= estado_actual_transita IGUAL estado_transitado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_transicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // estado_transitado ::= PARENTESIS_ABIERTO lista_simbolos_coma PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_transitado",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // estado_transitado ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_transitado",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estado_actual_transita ::= identificador COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_actual_transita",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // estado_actual_transita ::= identificador COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_actual_transita",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_reglas_produccion ::= regla_produccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_produccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_reglas_produccion ::= lista_reglas_produccion regla_produccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_produccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // regla_produccion ::= identificador ASIGNADOR union_lista_simbolos PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_produccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // transicion ::= TRANSICION CORCHETE_ABIERTO lista_reglas_transicion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // final ::= FINAL lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inicial ::= INICIAL identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // alfabeto ::= ALFABETO lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alfabeto",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estados ::= ESTADOS lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // produccion ::= PRODUCCION CORCHETE_ABIERTO lista_reglas_produccion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("produccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // axioma ::= AXIOMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axioma",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // no_term ::= NO_TERMINAL lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= TERMINAL lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // transicion_p ::= transicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion_p",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // final_p ::= final PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_p",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicial_p ::= inicial PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial_p",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // alfabeto_p ::= alfabeto PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alfabeto_p",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estados_p ::= estados PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados_p",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // produccion_p ::= produccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("produccion_p",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // axioma_p ::= axioma PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axioma_p",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // no_term_p ::= no_term PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_term_p",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term_p ::= term PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_p",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fatondfa ::= identificador IGUAL FATONDFA PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fatondfa",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fatondfa_p ::= fatondfa PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fatondfa_p",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // retofa ::= identificador IGUAL RETOFA PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retofa",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // retofa_p ::= retofa PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retofa_p",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // recognize ::= RECONOCER PARENTESIS_ABIERTO identificador COMA lista_simbolos_espacio PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recognize",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // recognize_p ::= recognize PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recognize_p",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // regexp ::= EXPRESION_REGULAR identificador CORCHETE_ABIERTO reg_expresion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regexp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // automaton ::= AUTOMATA identificador CORCHETE_ABIERTO estados_p alfabeto_p inicial_p final_p transicion_p CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("automaton",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // gramat ::= GRAMATICA identificador CORCHETE_ABIERTO term_p no_term_p axioma_p produccion_p CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gramat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identificador ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // functions ::= fatondfa_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // functions ::= retofa_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // functions ::= recognize_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // general ::= functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // general ::= general functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // general ::= reg_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // general ::= regexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // general ::= automaton 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // general ::= gramat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // general ::= general regexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // general ::= general automaton 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= general EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // general ::= general gramat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

