
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 11 18:57:52 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 11 18:57:52 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\040\004\000\002\002\004\000\002\040" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\042\003\000\002\042\003\000\002\036" +
    "\012\000\002\037\013\000\002\071\007\000\002\063\004" +
    "\000\002\066\010\000\002\064\004\000\002\067\010\000" +
    "\002\065\004\000\002\070\010\000\002\050\004\000\002" +
    "\052\004\000\002\046\004\000\002\047\010\000\002\051" +
    "\010\000\002\045\010\000\002\014\004\000\002\015\004" +
    "\000\002\016\004\000\002\017\003\000\002\020\004\000" +
    "\002\021\004\000\002\022\004\000\002\023\004\000\002" +
    "\024\003\000\002\025\004\000\002\026\004\000\002\027" +
    "\004\000\002\030\006\000\002\031\004\000\002\032\004" +
    "\000\002\033\004\000\002\034\004\000\002\035\006\000" +
    "\002\007\006\000\002\010\004\000\002\010\003\000\002" +
    "\005\004\000\002\005\005\000\002\006\003\000\002\006" +
    "\005\000\002\011\005\000\002\012\004\000\002\013\004" +
    "\000\002\013\003\000\002\002\004\000\002\002\003\000" +
    "\002\003\005\000\002\003\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\043\003\000\002\043\003" +
    "\000\002\053\003\000\002\053\005\000\002\053\004\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\055" +
    "\005\000\002\056\007\000\002\057\004\000\002\060\004" +
    "\000\002\061\004\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\034\006\015\014\026\016\017\023\004\031" +
    "\021\032\040\033\010\034\024\035\047\036\013\044\006" +
    "\045\051\053\032\001\002\000\006\031\021\034\024\001" +
    "\002\000\036\002\ufff6\006\ufff6\014\ufff6\016\ufff6\023\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\044" +
    "\ufff6\045\ufff6\053\ufff6\001\002\000\006\031\021\034\024" +
    "\001\002\000\036\002\ufff7\006\ufff7\014\ufff7\016\ufff7\023" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\044\ufff7\045\ufff7\053\ufff7\001\002\000\052\002\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\013\uffbe\014\uffbe\016\uffbe\023\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\044" +
    "\uffbe\045\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\001\002" +
    "\000\004\011\205\001\002\000\052\002\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\013\uffb3\014\uffb3\016\uffb3\023\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\044\uffb3\045" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\004" +
    "\006\200\001\002\000\036\002\ufffd\006\ufffd\014\ufffd\016" +
    "\ufffd\023\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\044\ufffd\045\ufffd\053\ufffd\001\002\000\024\006" +
    "\015\014\026\031\021\032\040\033\010\034\024\035\047" +
    "\045\051\053\032\001\002\000\050\002\uffbf\006\uffbf\013" +
    "\uffbf\014\uffbf\015\151\016\uffbf\023\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\044\uffbf\045\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000\006\031\021" +
    "\034\024\001\002\000\036\002\ufffe\006\ufffe\014\ufffe\016" +
    "\ufffe\023\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\044\ufffe\045\ufffe\053\ufffe\001\002\000\064\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\023\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\044\ufff4" +
    "\045\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\001\002\000" +
    "\052\002\uffba\005\uffba\006\uffba\007\uffba\013\uffba\014\uffba" +
    "\016\uffba\023\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\044\uffba\045\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\001\002\000\004\011\101\001\002\000\064\002" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\023\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\044\ufff3" +
    "\045\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\001\002\000" +
    "\036\002\ufff9\006\ufff9\014\ufff9\016\ufff9\023\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\044\ufff9\045" +
    "\ufff9\053\ufff9\001\002\000\052\002\uffab\005\uffab\006\uffab" +
    "\007\uffab\013\uffab\014\uffab\016\uffab\023\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\uffab\044\uffab\045\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\001\002\000\036\002" +
    "\ufffc\006\ufffc\014\ufffc\016\ufffc\023\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\044\ufffc\045\ufffc\053" +
    "\ufffc\001\002\000\052\002\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\013\uffb6\014\uffb6\016\uffb6\023\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\044\uffb6\045\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\001\002\000\036\002\ufffa\006" +
    "\ufffa\014\ufffa\016\ufffa\023\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\044\ufffa\045\ufffa\053\ufffa\001" +
    "\002\000\012\031\021\032\040\033\010\034\024\001\002" +
    "\000\036\002\uffff\006\uffff\014\uffff\016\uffff\023\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\044\uffff" +
    "\045\uffff\053\uffff\001\002\000\046\002\ufff8\006\015\013" +
    "\072\014\026\016\ufff8\023\ufff8\031\021\032\040\033\010" +
    "\034\024\035\047\036\ufff8\044\ufff8\045\051\050\073\051" +
    "\074\052\071\053\032\001\002\000\036\002\ufffb\006\ufffb" +
    "\014\ufffb\016\ufffb\023\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\044\ufffb\045\ufffb\053\ufffb\001\002" +
    "\000\004\011\067\001\002\000\004\011\066\001\002\000" +
    "\052\002\uffbd\005\uffbd\006\uffbd\007\uffbd\013\uffbd\014\uffbd" +
    "\016\uffbd\023\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\044\uffbd\045\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\001\002\000\052\002\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\013\uffb5\014\uffb5\016\uffb5\023\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\044\uffb5\045\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002\000\036\002\ufff5" +
    "\006\ufff5\014\ufff5\016\ufff5\023\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\044\ufff5\045\ufff5\053\ufff5" +
    "\001\002\000\036\002\064\006\015\014\026\016\017\023" +
    "\004\031\021\032\040\033\010\034\024\035\047\036\013" +
    "\044\006\045\051\053\032\001\002\000\052\002\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\013\uffb7\014\uffb7\016\uffb7\023\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\044" +
    "\uffb7\045\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002" +
    "\000\052\002\uffac\005\uffac\006\uffac\007\uffac\013\uffac\014" +
    "\uffac\016\uffac\023\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\044\uffac\045\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\001\002\000\052\002\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\013\uffb4\014\uffb4\016\uffb4\023\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\044\uffb4\045\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\001\002\000\052\002" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\013\uffaa\014\uffaa\016\uffaa" +
    "\023\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\044\uffaa\045\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\001\002\000\004\011\063\001\002\000\006\032\055\034" +
    "\056\001\002\000\004\011\054\001\002\000\052\002\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\013\uffb2\014\uffb2\016\uffb2\023" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\044\uffb2\045\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\001" +
    "\002\000\036\002\uffeb\006\uffeb\014\uffeb\016\uffeb\023\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\044" +
    "\uffeb\045\uffeb\053\uffeb\001\002\000\006\046\uffbb\047\uffbb" +
    "\001\002\000\006\046\uffbc\047\uffbc\001\002\000\004\047" +
    "\060\001\002\000\006\032\055\034\056\001\002\000\004" +
    "\046\062\001\002\000\052\002\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\013\uffb0\014\uffb0\016\uffb0\023\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\044\uffb0\045\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\001\002\000\036\002\uffef" +
    "\006\uffef\014\uffef\016\uffef\023\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\044\uffef\045\uffef\053\uffef" +
    "\001\002\000\004\002\000\001\002\000\036\002\001\006" +
    "\001\014\001\016\001\023\001\031\001\032\001\033\001" +
    "\034\001\035\001\036\001\044\001\045\001\053\001\001" +
    "\002\000\036\002\uffed\006\uffed\014\uffed\016\uffed\023\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\044" +
    "\uffed\045\uffed\053\uffed\001\002\000\036\002\uffe7\006\uffe7" +
    "\014\uffe7\016\uffe7\023\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\044\uffe7\045\uffe7\053\uffe7\001\002" +
    "\000\052\002\uffb8\005\uffb8\006\015\007\uffb8\013\072\014" +
    "\026\016\uffb8\023\uffb8\031\021\032\040\033\010\034\024" +
    "\035\047\036\uffb8\044\uffb8\045\051\050\073\051\074\052" +
    "\071\053\032\001\002\000\052\002\uffad\005\uffad\006\uffad" +
    "\007\uffad\013\uffad\014\uffad\016\uffad\023\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\044\uffad\045\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\001\002\000\024\006" +
    "\015\014\026\031\021\032\040\033\010\034\024\035\047" +
    "\045\051\053\032\001\002\000\052\002\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\013\uffaf\014\uffaf\016\uffaf\023\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\044\uffaf\045" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\001\002\000\052" +
    "\002\uffae\005\uffae\006\uffae\007\uffae\013\uffae\014\uffae\016" +
    "\uffae\023\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\044\uffae\045\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\001\002\000\052\002\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\013\uffbf\014\uffbf\016\uffbf\023\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\044\uffbf\045\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\001\002\000\052\002\uffb1\005" +
    "\uffb1\006\015\007\uffb1\013\uffb1\014\026\016\uffb1\023\uffb1" +
    "\031\021\032\040\033\010\034\024\035\047\036\uffb1\044" +
    "\uffb1\045\051\050\073\051\074\052\071\053\032\001\002" +
    "\000\004\053\100\001\002\000\052\002\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\013\uffa9\014\uffa9\016\uffa9\023\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\044\uffa9\045" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\001\002\000\036" +
    "\002\uffe8\006\uffe8\014\uffe8\016\uffe8\023\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\044\uffe8\045\uffe8" +
    "\053\uffe8\001\002\000\004\004\103\001\002\000\004\017" +
    "\104\001\002\000\006\031\021\034\024\001\002\000\004" +
    "\020\111\001\002\000\004\011\107\001\002\000\004\020" +
    "\uffe3\001\002\000\004\011\147\001\002\000\006\031\021" +
    "\034\024\001\002\000\004\021\113\001\002\000\006\031" +
    "\021\034\024\001\002\000\004\022\117\001\002\000\004" +
    "\011\116\001\002\000\004\022\uffe1\001\002\000\004\004" +
    "\123\001\002\000\004\005\122\001\002\000\004\005\uffe0" +
    "\001\002\000\036\002\ufff2\006\ufff2\014\ufff2\016\ufff2\023" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\044\ufff2\045\ufff2\053\ufff2\001\002\000\006\031\021\034" +
    "\024\001\002\000\004\012\131\001\002\000\010\005\127" +
    "\031\021\034\024\001\002\000\010\005\uffcf\031\uffcf\034" +
    "\uffcf\001\002\000\004\005\uffd7\001\002\000\010\005\uffd0" +
    "\031\uffd0\034\uffd0\001\002\000\006\031\021\034\024\001" +
    "\002\000\006\011\137\013\136\001\002\000\014\007\uffc5" +
    "\011\uffc5\013\uffc5\031\uffc5\034\uffc5\001\002\000\012\011" +
    "\uffc0\013\uffc0\031\021\034\024\001\002\000\014\007\uffc6" +
    "\011\uffc6\013\uffc6\031\uffc6\034\uffc6\001\002\000\010\014" +
    "\140\031\021\034\024\001\002\000\010\005\uffd1\031\uffd1" +
    "\034\uffd1\001\002\000\006\011\uffc1\013\uffc1\001\002\000" +
    "\012\011\uffc2\013\uffc2\031\021\034\024\001\002\000\004" +
    "\011\uffd8\001\002\000\010\007\uffc3\010\uffc3\011\uffc3\001" +
    "\002\000\006\010\145\011\uffd9\001\002\000\006\031\021" +
    "\034\024\001\002\000\010\007\uffc4\010\uffc4\011\uffc4\001" +
    "\002\000\004\021\uffe2\001\002\000\006\010\145\011\uffda" +
    "\001\002\000\014\037\152\040\154\041\156\042\153\043" +
    "\155\001\002\000\004\006\173\001\002\000\004\006\170" +
    "\001\002\000\004\006\165\001\002\000\004\006\162\001" +
    "\002\000\004\006\157\001\002\000\006\031\021\034\024" +
    "\001\002\000\004\007\161\001\002\000\004\011\uffe6\001" +
    "\002\000\006\031\021\034\024\001\002\000\004\007\164" +
    "\001\002\000\004\011\uffe4\001\002\000\006\031\021\034" +
    "\024\001\002\000\004\007\167\001\002\000\004\011\uffea" +
    "\001\002\000\006\031\021\034\024\001\002\000\004\007" +
    "\172\001\002\000\004\011\uffe5\001\002\000\006\031\021" +
    "\034\024\001\002\000\004\007\175\001\002\000\004\011" +
    "\uffec\001\002\000\036\006\015\007\177\013\072\014\026" +
    "\031\021\032\040\033\010\034\024\035\047\045\051\050" +
    "\073\051\074\052\071\053\032\001\002\000\052\002\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\013\uffb9\014\uffb9\016\uffb9\023" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\044\uffb9\045\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\006\031\021\034\024\001\002\000\004\010\202" +
    "\001\002\000\006\031\021\034\024\001\002\000\010\007" +
    "\204\031\021\034\024\001\002\000\004\011\uffee\001\002" +
    "\000\036\002\uffe9\006\uffe9\014\uffe9\016\uffe9\023\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\044\uffe9" +
    "\045\uffe9\053\uffe9\001\002\000\004\004\207\001\002\000" +
    "\024\006\015\014\026\031\021\032\040\033\010\034\024" +
    "\035\047\045\051\053\032\001\002\000\036\005\211\006" +
    "\015\013\072\014\026\031\021\032\040\033\010\034\024" +
    "\035\047\045\051\050\073\051\074\052\071\053\032\001" +
    "\002\000\036\002\ufff0\006\ufff0\014\ufff0\016\ufff0\023\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\044" +
    "\ufff0\045\ufff0\053\ufff0\001\002\000\004\004\213\001\002" +
    "\000\004\024\215\001\002\000\004\025\222\001\002\000" +
    "\006\031\021\034\024\001\002\000\004\011\217\001\002" +
    "\000\004\025\uffdf\001\002\000\006\010\145\011\uffd6\001" +
    "\002\000\004\026\227\001\002\000\006\031\021\034\024" +
    "\001\002\000\004\011\224\001\002\000\004\026\uffde\001" +
    "\002\000\006\010\145\011\uffd5\001\002\000\004\027\235" +
    "\001\002\000\006\031\021\034\024\001\002\000\004\011" +
    "\231\001\002\000\004\027\uffdd\001\002\000\004\011\uffd4" +
    "\001\002\000\004\030\242\001\002\000\004\011\237\001" +
    "\002\000\006\031\021\034\024\001\002\000\006\010\145" +
    "\011\uffd3\001\002\000\004\030\uffdc\001\002\000\004\005" +
    "\uffdb\001\002\000\004\005\264\001\002\000\004\004\243" +
    "\001\002\000\006\031\021\034\024\001\002\000\004\015" +
    "\256\001\002\000\004\010\254\001\002\000\010\005\uffc7" +
    "\031\uffc7\034\uffc7\001\002\000\010\005\252\031\021\034" +
    "\024\001\002\000\004\011\251\001\002\000\010\005\uffc9" +
    "\031\uffc9\034\uffc9\001\002\000\004\005\uffd2\001\002\000" +
    "\010\005\uffc8\031\uffc8\034\uffc8\001\002\000\010\015\uffce" +
    "\031\021\034\024\001\002\000\004\015\uffcd\001\002\000" +
    "\010\006\261\031\021\034\024\001\002\000\004\011\uffcc" +
    "\001\002\000\004\011\uffca\001\002\000\006\031\021\034" +
    "\024\001\002\000\006\007\263\010\145\001\002\000\004" +
    "\011\uffcb\001\002\000\036\002\ufff1\006\ufff1\014\ufff1\016" +
    "\ufff1\023\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\044\ufff1\045\ufff1\053\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\070\036\017\037\013\040\042\041\044\042" +
    "\015\044\032\045\035\046\024\047\010\050\034\051\022" +
    "\052\030\053\033\054\021\055\052\056\043\057\040\060" +
    "\045\061\011\062\027\063\006\064\004\065\041\066\047" +
    "\067\036\070\051\071\026\001\001\000\004\042\211\001" +
    "\001\000\002\001\001\000\004\042\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\041\044" +
    "\042\074\053\175\054\021\055\052\056\043\057\040\060" +
    "\045\061\011\062\027\001\001\000\002\001\001\000\004" +
    "\042\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\076\042\074\001\001" +
    "\000\002\001\001\000\026\041\044\042\074\053\067\054" +
    "\021\055\052\056\043\057\040\060\045\061\011\062\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\036\017\037\013\041\044\042\015\044\064\045" +
    "\035\046\024\047\010\050\034\051\022\052\030\053\033" +
    "\054\021\055\052\056\043\057\040\060\045\061\011\062" +
    "\027\063\006\064\004\065\041\066\047\067\036\070\051" +
    "\071\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\041" +
    "\044\042\074\053\067\054\021\055\052\056\043\057\040" +
    "\060\045\061\011\062\027\001\001\000\002\001\001\000" +
    "\026\041\044\042\074\053\075\054\021\055\052\056\043" +
    "\057\040\060\045\061\011\062\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\041\044" +
    "\042\074\053\067\054\021\055\052\056\043\057\040\060" +
    "\045\061\011\062\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\104\025\105\001\001\000\006\003\147\042\142\001\001" +
    "\000\006\015\111\026\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\143\042\142" +
    "\001\001\000\006\016\113\027\114\001\001\000\004\042" +
    "\141\001\001\000\006\017\117\030\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\125" +
    "\010\124\042\123\001\001\000\002\001\001\000\006\007" +
    "\127\042\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\133\004\131\042\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\134" +
    "\001\001\000\002\001\001\000\006\002\140\042\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\041\044" +
    "\042\074\053\067\054\021\055\052\056\043\057\040\060" +
    "\045\061\011\062\027\001\001\000\002\001\001\000\004" +
    "\042\200\001\001\000\002\001\001\000\006\002\202\042" +
    "\132\001\001\000\004\042\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\041\044\042" +
    "\074\053\207\054\021\055\052\056\043\057\040\060\045" +
    "\061\011\062\027\001\001\000\026\041\044\042\074\053" +
    "\067\054\021\055\052\056\043\057\040\060\045\061\011" +
    "\062\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\213\031\215\001\001\000\006\021\220\032\222" +
    "\001\001\000\006\003\217\042\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\225" +
    "\033\227\001\001\000\006\003\224\042\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\232\034\233\001\001\000\004\042\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\240\035\237\001\001\000\002\001\001\000\006\003" +
    "\235\042\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\243\011\247\012\245\013\246\042\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\243\011\247\012\252\042\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\254\001\001\000\002\001\001\000\006" +
    "\006\257\042\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\261\042\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static void main(String args[]) throws Exception {
    try{
      new parser(new Yylex(System.in)).parse();  // Inicializamos el scanner (Yylex) para que
    }
    catch ( Exception e) {
      System.out.println( e );
      System.out.println(" Analisis INCORRECTO !!");
      System.exit(1);
    }
    System.out.println("Analisis Correcto ");
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // regla_expresion ::= COMILLA texto COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_expresion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // regla_expresion ::= LENGUAJE_VACIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_expresion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // regla_expresion ::= PALABRA_VACIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_expresion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // regla_expresion ::= texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_expresion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // regla_opcionalidad ::= reg_expresion INTERROGACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_opcionalidad",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // regla_clausura_positiva ::= reg_expresion CLAUSURA_POSITIVA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_clausura_positiva",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // regla_clausura ::= reg_expresion CLAUSURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_clausura",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // regla_clase ::= P_CUADRADO_ABIERTO caracter GUION caracter P_CUADRADO_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_clase",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // regla_interseccion ::= reg_expresion UNION reg_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_interseccion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // reglas_expresiones ::= regla_interseccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // reglas_expresiones ::= regla_opcionalidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // reglas_expresiones ::= regla_clausura_positiva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // reglas_expresiones ::= regla_clausura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // reglas_expresiones ::= regla_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // reglas_expresiones ::= regla_clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas_expresiones",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // reg_expresion ::= reg_expresion reg_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expresion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // reg_expresion ::= PARENTESIS_ABIERTO reg_expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expresion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // reg_expresion ::= reglas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expresion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // caracter ::= CARACTER_NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caracter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // caracter ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caracter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // texto ::= CARACTER_NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // texto ::= CARACTERES_NUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // texto ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // union_lista_simbolos ::= lista_simbolos_espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_lista_simbolos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // union_lista_simbolos ::= union_lista_simbolos UNION PALABRA_VACIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_lista_simbolos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // union_lista_simbolos ::= union_lista_simbolos UNION lista_simbolos_espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_lista_simbolos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_simbolos_coma ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_coma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_simbolos_coma ::= lista_simbolos_coma COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_coma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_simbolos_espacio ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_espacio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_simbolos_espacio ::= lista_simbolos_espacio identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos_espacio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_reglas_transicion ::= regla_transicion_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_transicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lista_reglas_transicion ::= lista_reglas_transicion regla_transicion_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_transicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // regla_transicion_p ::= regla_transicion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_transicion_p",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // regla_transicion ::= estado_actual_transita IGUAL estado_transitado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_transicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estado_transitado ::= PARENTESIS_ABIERTO lista_simbolos_coma PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_transitado",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estado_transitado ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_transitado",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estado_actual_transita ::= identificador COMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_actual_transita",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estado_actual_transita ::= identificador COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_actual_transita",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_reglas_produccion ::= regla_produccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_produccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lista_reglas_produccion ::= lista_reglas_produccion regla_produccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas_produccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // regla_produccion ::= identificador ASIGNADOR union_lista_simbolos PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regla_produccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // transicion ::= TRANSICION CORCHETE_ABIERTO lista_reglas_transicion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // final ::= FINAL lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inicial ::= INICIAL identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // alfabeto ::= ALFABETO lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alfabeto",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estados ::= ESTADOS lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // produccion ::= PRODUCCION CORCHETE_ABIERTO lista_reglas_produccion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("produccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // axioma ::= AXIOMA identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axioma",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // no_term ::= NO_TERMINAL lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // term ::= TERMINAL lista_simbolos_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // transicion_p ::= transicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("transicion_p",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // final_p ::= final PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_p",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inicial_p ::= inicial PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial_p",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // alfabeto_p ::= alfabeto PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alfabeto_p",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estados_p ::= estados PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estados_p",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // produccion_p ::= produccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("produccion_p",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // axioma_p ::= axioma PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axioma_p",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // no_term_p ::= no_term PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_term_p",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term_p ::= term PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_p",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fun_clean ::= identificador IGUAL FUN_CLEAN PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_clean",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fun_cfg_to_pda ::= identificador IGUAL FUN_CFG_TO_PDA PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_cfg_to_pda",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fun_fa_to_re ::= identificador IGUAL FUN_FA_TO_RE PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_fa_to_re",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fun_clean_p ::= fun_clean PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_clean_p",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fun_cfg_to_pda_p ::= fun_cfg_to_pda PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_cfg_to_pda_p",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fun_fa_to_re_p ::= fun_fa_to_re PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_fa_to_re_p",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fatondfa ::= identificador IGUAL FATONDFA PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fatondfa",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fatondfa_p ::= fatondfa PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fatondfa_p",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // retofa ::= identificador IGUAL RETOFA PARENTESIS_ABIERTO identificador PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retofa",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // retofa_p ::= retofa PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retofa_p",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // recognize ::= RECONOCER PARENTESIS_ABIERTO identificador COMA lista_simbolos_espacio PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recognize",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // recognize_p ::= recognize PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recognize_p",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // regexp ::= EXPRESION_REGULAR identificador CORCHETE_ABIERTO reg_expresion CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regexp",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // automaton ::= AUTOMATA identificador CORCHETE_ABIERTO estados_p alfabeto_p inicial_p final_p transicion_p CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("automaton",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // gramat ::= GRAMATICA identificador CORCHETE_ABIERTO term_p no_term_p axioma_p produccion_p CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gramat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identificador ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // terminos_base ::= fatondfa_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // terminos_base ::= retofa_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // terminos_base ::= recognize_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // terminos_base ::= reg_expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // terminos_base ::= fun_clean_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // terminos_base ::= fun_cfg_to_pda_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // terminos_base ::= fun_fa_to_re_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // terminos_base ::= regexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // terminos_base ::= automaton 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // terminos_base ::= gramat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminos_base",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // general ::= terminos_base 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= general EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // general ::= general terminos_base 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

